package factoryMode.abstractMode;

/**
 * 抽象工厂模式调用
 * 生产两个奔驰车C180、E260和它们对应的导航仪的演示
 * 这里使用多态的方法类创建各个类别的车型产品
 *
 * 也可以创建一个类,做成方法,提供这2个工厂;
 *
 *1.优点
 如果需要生产新的汽车产品和对应的导航仪设备，你只需要创建一个该产品对应的具体工厂和该产品的具体实现类，不需要改变抽象的工厂类和抽象的产品类，具体工厂类和具体产品类需要什么操作已经在抽象接口类定义好了。

 2.缺点
 之前有说工厂方法的扩展性算是比较好的，而抽象工厂模式的扩展性就没那么好了。
 比如说某个工厂需要多创建几个产品对象，那么就需要增加抽象工厂的方法，增加抽象接口的方法后，其他实现了抽象工厂接口方法的所有类都需要改变，才能正常编译。




 1.优点
 针对同一组产品创建新的生产线，只需实现那组产品的抽象工厂接口即可创建新的工厂类。(多个产品,形成一个生产线)

 2.缺点
 抽象方法模式的最大缺点就是产品族本身的扩展非常困难。如果在产品族中增加一个新的产品类型，则需要修改多个接口，并影响现已有的工厂类。
 上面这句话，有些人不怎么理解，我給大家解释一下，打个比方说，你要在这个工厂创建三个对象，原本只是创建两个对象的，那么你就要在抽象方法中添加一个创建对象的方法，那么所有实现了这个接口的类都是要重新添加这个创建对象的方法，这就是对之前的工厂有影响的原因。

 抽象工厂模式的应用场景
 当一个对象都有相同的约束时，可以使用抽象工厂模式。
 打个比方说，这个工厂的几个产品都需要经过某些共同的步骤和打上相同的商标，这一组产品可以在一个工厂里面生产，减少很多重复的代码在不同的地方都出现多次。
 *
 */
public class AbstractFactoryDemo {
    public static void main(String[] a) {
        System.out.println("生产奔驰车C180");
        //父类但对象子类的实例
        BanzFactory banzFactory = new C180Factory();//创建一个C180工厂
        //调用父类的方法，这就是java多态的一种体现
        banzFactory.createCar();//C180工厂生产车辆C180
        banzFactory.createNacigator();//生产车辆C180对应的导航仪

        System.out.println("=========================================");
        System.out.println("生产奔驰车Z260");
        BanzFactory banzFactory2 = new E260Factory();
        banzFactory2.createCar();//E260工厂生产车辆E260
        banzFactory2.createNacigator();//生产车辆E260对应的导航仪

    }

}